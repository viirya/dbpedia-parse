
() <- $(document).ready!

    socket = io.connect('http://cml10.csie.ntu.edu.tw:8088')
    (data) <- socket.on('words', _)
        #console.log(data)
        window.related_words = data

        window.init_vis!
        window.words_tree = words_tree = construct_tree(data)
        window.update_vis(words_tree)
        #for subtree in words_tree.children
        #    window.update_vis(subtree)
        

    construct_tree = (data) ->
        tree = 
            'title': window.query
            'children': []

        relation_map =
            'subject': '擴充詞彙'

        for key, items of data
            #console.log(key)
            subtree =
                'title': relation_map[key]
                'children': []

            tree['children'].push(subtree)
        
            for item in items
                subtree['children'].push(item)

        return tree
       

    () <- $("#query").bind("enterkey", _)
        #console.log($(this).val!)
        window.query = $(this).val!
        socket.emit('query', $(this).val!)

    (e) <- $("#query").keyup!
        if e.keyCode is 13
            $(this).trigger("enterkey")    

    window.tree_size =
        height: 600
        width: 1000

    window.init_vis = () ->

        # Want to set a horizontally extended tree, so swap height and width parameters.

        # d3 tree layout will set up a vertically extended tree. The layout will automatically
        # set up the (x, y) for all nodes in the tree. The strategy is to evenly divide width and height
        # between nodes. So assume that width and height is 1000 and 600, if the input is a tree with
        # 1 root node and 1 node in 2nd level and 5 nodes in 3rd level. The (x, y) for root node would be
        # (300, 0). (300, 500) for 2nd level node. The y for the 5 nodes in 3rd level would be the same as
        # 1000. Their x are (60, 180, 300, 420, 540).

        # So since we want to set up a horizontal tree, we swap actual height and width for the layout.        

        window.tree = tree = d3.layout.tree()
            .size([window.tree_size.height, window.tree_size.width]);

        # Since we swap x and y for nodes in tree. The projection should swap its output too.

        window.diagonal = d3.svg.diagonal()
            .projection((d) ->
                return [d.y, d.x]
            )

        d3.select("svg").remove()
        window.svg = svg = d3.select("#d3-canvas").append("svg")
            .attr("width", window.tree_size.width)
            .attr("height", window.tree_size.height)
            .append("g")
            .attr("transform", "translate(" + 200 + "," + 0 + ")")
 

    window.update_vis = (word_tree) ->    

        width = window.tree_size.width
        height = window.tree_size.height
        i = 0

        unless word_tree.x0?
            word_tree.x0 = 0
        unless word_tree.y0?
            word_tree.y0 = height / 2

        tree = window.tree
        svg = window.svg
        diagonal = window.diagonal

        nodes = tree.nodes(window.words_tree).reverse()
        links = tree.links(nodes)

        # Forcelly set up y for nodes. 

        nodes.forEach((d) -> d.y = d.depth * 180)

        g_nodes = svg.selectAll("g.node")
            .data(nodes, (d) -> return d.id || (d.id = ++i))

        enter_nodes = g_nodes.enter().append("g")
            .attr("class", "node")
            .attr("transform", (d) -> return "translate(" + word_tree.y0 + "," + word_tree.x0 + ")")
            .on("click", node_click)

        enter_nodes.append("circle")
            .attr("r", 1e-6)
            .style("stroke", "steelblue")
            .style("fill", (d) -> return if d._children then "lightsteelblue" else "#fff");

        enter_nodes.append("text")
            .attr("x", (d) -> return if (d.children or d._children) then -10 else 10)
            .attr("dy", ".35em")
            .attr("text-anchor", (d) -> return if (d.children or d._children) then "end" else "start")
            .text((d) -> return d.title)
            .style("fill-opacity", 1e-6)

        update_nodes = g_nodes.transition()
            .duration(750)
            .attr("transform", (d) -> return "translate(" + d.y + "," + d.x + ")")

        update_nodes.select("circle")
            .attr("r", 4.5)
            .style("fill", (d) -> return if d._children then "lightsteelblue" else "#fff")

        update_nodes.select("text")
            .style("fill-opacity", 1)

        exit_nodes = g_nodes.exit().transition()
            .duration(750)
            .attr("transform", (d) -> return "translate(" + word_tree.y + "," + word_tree.x + ")")
            .remove!

        exit_nodes.select("circle")
            .attr("r", 1e-6)
        
        exit_nodes.select("text")
            .style("fill-opacity", 1e-6)

        g_links = svg.selectAll("path.link")
            .data(links, (d) -> return d.target.id)

        g_links.enter().insert("path", "g")
            .attr("class", "link")
            .style("fill", "none")
            .style("stroke", "#ccc")
            .attr("d", (d) ->
                o = {x: word_tree.x0, y: word_tree.y0}
                return diagonal({source: o, target: o})  # the x and y of links would be swaped by projection
            )

        g_links.transition()
            .duration(750)
            .attr("d", diagonal)

        g_links.exit().transition()
            .duration(750)
            .attr("d", (d) ->
              o = {x: word_tree.x, y: word_tree.y}
              return diagonal({source: o, target: o})
            )
            .remove!

        (node) <- nodes.forEach!
            node.x0 = node.x
            node.y0 = node.y

    node_click = (d) ->
        if d.children? 
          d._children = d.children
          d.children = null
        else 
          d.children = d._children
          d._children = null
        window.update_vis(d)


