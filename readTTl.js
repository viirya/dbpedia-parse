// Generated by CozyScript 0.1.1
(function() {
  var cli, db, fs, lazy, lines, link, n3, neo4j, options, parser, pattern_fetch, regex, regex_remove_mark, save_node;

  lazy = require("lazy");

  fs = require("fs");

  cli = require('cli');

  neo4j = require('neo4j');

  db = new neo4j.GraphDatabase('http://localhost:7474');

  n3 = require('n3');

  parser = new n3.Parser();

  options = cli.parse({
    f: ['f', 'The ttl filename', 'string'],
    index: ['i', 'The index of neo4j database', 'string', 'default']
  });

  lines = new lazy(fs.createReadStream(options.f)).lines;

  regex = /http:\/\/.+\/(.+)/;

  regex_remove_mark = /.*:/;

  pattern_fetch = function(pattern, str) {
    var match;
    match = pattern.exec(str);
    if ((match != null)) {
      return match;
    } else {
      return null;
    }
  };

  save_node = function(title, cb) {
    var node;
    node = db.createNode({
      title: title
    });
    return node.save(function(err, node) {
      if (err) {
        return console.err('Error saving new node to database:', err);
      } else {
        console.log('Saved node: ', node.id);
        return node.index(options.index, 'title', title, function(err) {
          if (err) {
            return console.err('Error indexing new node to database:', err);
          } else {
            console.log('Indexed node: ', node.id);
            if ((cb != null)) {
              return cb(node);
            }
          }
        });
      }
    });
  };

  link = function(source_node, target_node, type, data, cb) {
    return source_node.createRelationshipTo(target_node, type, data, function(err, relation) {
      if (err) {
        return console.err('Error creating relationship: ', err);
      } else {
        return relation.save(function(err, rel) {
          if (err) {
            return console.err('Error saving new relationship:', err);
          } else {
            console.log('Saved relationship: ', rel.id);
            if ((cb != null)) {
              return cb(rel);
            }
          }
        });
      }
    });
  };

  parser.parse(fs.createReadStream(options.f), function(error, triple, next) {
    var object, predicate, subject;
    if (triple) {
      console.log(triple.subject, triple.predicate, triple.object, '.');
      subject = pattern_fetch(regex, triple.subject);
      predicate = pattern_fetch(regex, triple.predicate);
      object = pattern_fetch(regex, triple.object);
      if ((subject != null) && (predicate != null) && (object != null)) {
        subject = subject[1].replace(regex_remove_mark, '');
        predicate = predicate[1].replace(regex_remove_mark, '');
        object = object[1].replace(regex_remove_mark, '');
        return save_node(subject, function(subject_node) {
          return save_node(object, function(object_node) {
            return link(subject_node, object_node, predicate, {
              title: predicate
            }, function(rel) {
              console.log(subject, predicate, object, 'rel:', rel.id);
              return next();
            });
          });
        });
      }
    } else {
      return console.log("# That's it, folks!");
    }
  });

}).call(this);
