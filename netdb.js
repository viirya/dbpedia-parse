// Generated by CozyScript 0.1.1
(function() {
  var NetDB, neo4j,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  neo4j = require('neo4j');

  NetDB = (function() {

    function NetDB(neo4j_url) {
      if (neo4j_url == null) {
        neo4j_url = 'http://localhost:7474';
      }
      this.findConnectedNodes = __bind(this.findConnectedNodes, this);
      this.findNode = __bind(this.findNode, this);
      this.db = new neo4j.GraphDatabase(neo4j_url);
    }

    NetDB.prototype.findNode = function(node_title, cb) {
      return this.db.getIndexedNode('default', 'title', node_title, function(err, node) {
        if (err) {
          return console.log('err', err);
        } else {
          return cb(node.data, node);
        }
      });
    };

    NetDB.prototype.findConnectedNodes = function(node_title, cb) {
      var _this = this;
      return this.findNode(node_title, function(node_data, node) {
        var query;
        query = "START me = node:default(title = '" + node_data.title + "') MATCH me-[:subject]->you RETURN you;";
        return _this.db.query(query, {}, function(err, results) {
          var data, row, _i, _len;
          if (err) {
            return console.log('err', err);
          } else {
            data = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              row = results[_i];
              node = row['you'];
              data.push(node.data);
            }
            return cb(data, results);
          }
        });
      });
    };

    return NetDB;

  })();

  exports.NetDB = NetDB;

}).call(this);
